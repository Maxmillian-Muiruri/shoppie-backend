{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/products';\n    }\n    getProducts(search) {\n      const url = search ? `${this.apiUrl}?search=${encodeURIComponent(search)}` : this.apiUrl;\n      return this.http.get(url);\n    }\n    getProductById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    createProduct(product, token) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.post(this.apiUrl, product, {\n        headers\n      });\n    }\n    updateProduct(id, product, token) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.put(`${this.apiUrl}/${id}`, product, {\n        headers\n      });\n    }\n    deleteProduct(id, token) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.delete(`${this.apiUrl}/${id}`, {\n        headers\n      });\n    }\n    uploadImage(file, token) {\n      const formData = new FormData();\n      formData.append('image', file);\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.post('http://localhost:3000/products/upload', formData, {\n        headers\n      });\n    }\n    static {\n      this.ɵfac = function ProductService_Factory(t) {\n        return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductService,\n        factory: ProductService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProductService;\n})();\nexport { ProductService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}