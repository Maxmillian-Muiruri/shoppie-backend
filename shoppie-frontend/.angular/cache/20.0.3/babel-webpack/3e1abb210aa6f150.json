{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ProductFormComponent } from './product-form';\nlet AdminDashboardComponent = class AdminDashboardComponent {\n  constructor(productService, authService) {\n    this.productService = productService;\n    this.authService = authService;\n    this.products = [];\n    this.loading = false;\n    this.error = '';\n    this.showProductForm = false;\n    this.editingProduct = null;\n    this.formLoading = false;\n    this.formError = '';\n  }\n  ngOnInit() {\n    this.fetchProducts();\n  }\n  fetchProducts() {\n    this.loading = true;\n    this.productService.getProducts().subscribe({\n      next: products => {\n        this.products = products;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = err.error?.message || 'Failed to load products.';\n        this.loading = false;\n      }\n    });\n  }\n  addProduct() {\n    this.editingProduct = null;\n    this.showProductForm = true;\n    this.formError = '';\n  }\n  editProduct(product) {\n    this.editingProduct = product;\n    this.showProductForm = true;\n    this.formError = '';\n  }\n  deleteProduct(productId) {\n    if (confirm('Are you sure you want to delete this product?')) {\n      this.productService.deleteProduct(productId).subscribe({\n        next: () => {\n          this.fetchProducts();\n        },\n        error: err => {\n          this.error = err.error?.message || 'Failed to delete product.';\n        }\n      });\n    }\n  }\n  onProductSaved() {\n    this.showProductForm = false;\n    this.editingProduct = null;\n    this.fetchProducts();\n  }\n  onCancel() {\n    this.showProductForm = false;\n    this.editingProduct = null;\n    this.formError = '';\n  }\n  handleFormSubmit(formValue) {\n    this.formLoading = true;\n    this.formError = '';\n    const token = this.authService.getToken() || '';\n    const saveProduct = imageUrl => {\n      const productData = {\n        ...formValue,\n        imageUrl: imageUrl || formValue.imageUrl\n      };\n      if (this.editingProduct) {\n        this.productService.updateProduct(this.editingProduct.id, productData, token).subscribe({\n          next: () => {\n            this.onCancel();\n            this.fetchProducts();\n            this.formLoading = false;\n          },\n          error: err => {\n            this.formError = err.error?.message || 'Failed to update product.';\n            this.formLoading = false;\n          }\n        });\n      } else {\n        this.productService.createProduct(productData, token).subscribe({\n          next: () => {\n            this.onCancel();\n            this.fetchProducts();\n            this.formLoading = false;\n          },\n          error: err => {\n            this.formError = err.error?.message || 'Failed to create product.';\n            this.formLoading = false;\n          }\n        });\n      }\n    };\n    if (formValue.imageFile) {\n      this.productService.uploadImage(formValue.imageFile, token).subscribe({\n        next: res => saveProduct(res.url),\n        error: err => {\n          this.formError = err.error?.message || 'Image upload failed.';\n          this.formLoading = false;\n        }\n      });\n    } else {\n      saveProduct();\n    }\n  }\n};\nAdminDashboardComponent = __decorate([Component({\n  selector: 'app-admin-dashboard',\n  standalone: true,\n  imports: [CommonModule, RouterModule, ProductFormComponent],\n  templateUrl: './admin-dashboard.html',\n  styleUrl: './admin-dashboard.css'\n})], AdminDashboardComponent);\nexport { AdminDashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}