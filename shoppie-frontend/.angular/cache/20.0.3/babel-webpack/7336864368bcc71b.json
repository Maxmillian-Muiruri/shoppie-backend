{"ast":null,"code":"import { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport let ProfileComponent = /*#__PURE__*/(() => {\n  class ProfileComponent {\n    constructor() {\n      this.authService = inject(AuthService);\n      this.http = inject(HttpClient);\n      this.user = null;\n      this.editMode = false;\n      this.loading = false;\n      this.error = '';\n      this.success = '';\n      this.form = {\n        name: '',\n        email: '',\n        password: ''\n      };\n    }\n    ngOnInit() {\n      this.loadUser();\n    }\n    loadUser() {\n      this.user = this.authService.getCurrentUser();\n      if (this.user) {\n        this.form.name = this.user.name;\n        this.form.email = this.user.email;\n        this.form.password = '';\n      }\n    }\n    enableEdit() {\n      this.editMode = true;\n      this.success = '';\n      this.error = '';\n    }\n    cancelEdit() {\n      this.editMode = false;\n      this.loadUser();\n      this.success = '';\n      this.error = '';\n    }\n    save() {\n      if (!this.user) return;\n      this.loading = true;\n      this.error = '';\n      this.success = '';\n      const update = {\n        name: this.form.name,\n        email: this.form.email\n      };\n      if (this.form.password) {\n        update.password = this.form.password;\n      }\n      this.http.put(`/users/${this.user.id}`, update).subscribe({\n        next: updatedUser => {\n          this.loading = false;\n          this.success = 'Profile updated successfully!';\n          this.editMode = false;\n          // Update local user info\n          localStorage.setItem('user', JSON.stringify(updatedUser));\n          this.authService['currentUserSubject'].next(updatedUser);\n          this.loadUser();\n        },\n        error: err => {\n          this.loading = false;\n          this.error = err.error?.message || 'Failed to update profile.';\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ProfileComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProfileComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProfileComponent,\n      selectors: [[\"app-profile\"]],\n      decls: 0,\n      vars: 0,\n      template: function ProfileComponent_Template(rf, ctx) {},\n      dependencies: [CommonModule, FormsModule],\n      styles: [\".profile-container[_ngcontent-%COMP%]{max-width:400px;margin:2rem auto;padding:2rem;background:#fff;border-radius:8px;box-shadow:0 2px 8px #00000014}.profile-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center;margin-bottom:1.5rem}.profile-info[_ngcontent-%COMP%]{margin-bottom:1.5rem}.profile-info[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{margin-bottom:.5rem}button[_ngcontent-%COMP%]{margin:.25rem .5rem .25rem 0;padding:.5rem 1.2rem;border:none;border-radius:4px;background:var(--primary-color);color:#fff;font-size:1rem;font-weight:500;cursor:pointer;transition:background .2s}button[_ngcontent-%COMP%]:hover{background:var(--secondary-color)}.profile-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{margin-bottom:1rem}.profile-form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;margin-bottom:.5rem;font-weight:500}.profile-form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;padding:.5rem;border:1px solid #ccc;border-radius:4px;font-size:1rem}.loading[_ngcontent-%COMP%], .error[_ngcontent-%COMP%], .success[_ngcontent-%COMP%]{text-align:center;margin:1rem 0;font-size:1.1rem}.error[_ngcontent-%COMP%]{color:var(--error-color)}.success[_ngcontent-%COMP%]{color:var(--success-color)}\"]\n    });\n  }\n  return ProfileComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}