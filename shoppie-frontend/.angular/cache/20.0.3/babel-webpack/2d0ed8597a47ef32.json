{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.apiUrl = 'http://localhost:3000';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Check for existing token on startup\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token && user) {\n        this.currentUserSubject.next(JSON.parse(user));\n      }\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n        localStorage.setItem('token', response.access_token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.currentUserSubject.next(response.user);\n      }));\n    }\n    register(userData) {\n      return this.http.post(`${this.apiUrl}/auth/register`, userData);\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.currentUserSubject.next(null);\n    }\n    isLoggedIn() {\n      return !!localStorage.getItem('token');\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isAdmin() {\n      const user = this.getCurrentUser();\n      return user && user.role === 'ADMIN';\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}